#+STARTUP: indent
* Motivation
Provide alternate implementation of Casper in Clojure.
* Leiningen
#+BEGIN_SRC clojure :tangle project.clj :eval no
(defproject caspojure "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [
                 [org.clojure/clojure "1.10.0-alpha4"]
                 [org.clojure/test.check "0.10.0-alpha2" :scope "test"]
                 ])
#+END_SRC

#+RESULTS:
: class clojure.lang.Compiler$CompilerExceptionclass clojure.lang.Compiler$CompilerExceptionCompilerException java.lang.RuntimeException: Unable to resolve symbol: defproject in this context, compiling:(/Users/lederstrumpf/Development_Dirty_Playground/Casper/caspojure/caspojure.org[*Org Src caspojure.org[ clojure ]*]:1:1) 

* Validator implementation
** Namespace declaration
#+BEGIN_SRC clojure :tangle src/caspojure/message.clj
(ns caspojure.message
  (:require [clojure.spec.gen.alpha :as gen]
            [clojure.spec.alpha :as s]))
#+END_SRC

#+RESULTS:
: nil

** Messages
:PROPERTIES:
:header-args:clojure: :tangle src/caspojure/message.clj :ns caspojure.message
:END:
Each node maintains a current view of the world. Nodes send one another messages that contain their votes and use votes received from others as the justification.
#+BEGIN_SRC clojure
(def relayer-count 10)
(s/def ::relayer-id (s/int-in 0 relayer-count))
(s/def ::vote boolean?)
(s/def ::vote-message (s/tuple ::relayer-id ::vote))
(s/def ::estimate boolean?)
(s/def ::genesis-message (s/tuple ::relayer-id ::estimate nil?))
(s/def ::relay-message (s/or :message (s/tuple ::relayer-id ::estimate (s/every (s/or :relay ::relay-message :vote ::vote-message) :min-count 1 :gen-max 4))
                       :genesis ::genesis-message))

(gen/generate (s/gen ::vote-message))
(gen/generate (s/gen ::relay-message))
#+END_SRC

#+RESULTS:
: :caspojure.message/vote
: :caspojure.message/estimate
: :caspojure.message/genesis-message
: :caspojure.message/message

Here's an example of a message.
#+BEGIN_SRC clojure
(s/valid? ::vote-message [2 false])

(s/explain ::relay-message [1 false
                     [[9 true
                       [[2 false nil]
                        [1 true [[0 true nil]]]]]
                      [0 true nil]]
                     ])
#+END_SRC

#+RESULTS:
: true
: true

Here's a message generated from its spec.
#+BEGIN_SRC clojure
(gen/generate (s/gen ::vote-message))
(gen/generate (s/gen ::relay-message))
#+END_SRC

#+RESULTS:
| 1 | 1 | ((1 1 ((1 1 ((1 0 ((1 0 nil) (0 0 nil) (1 0 nil) (1 1 nil))))) (0 1 ((0 0 ((1 0 nil) (1 0 nil))) (1 0 ((1 0 nil) (1 1 nil))) (0 1 nil) (0 0 ((1 1 nil) (1 1 nil))))) (1 1 nil) (1 1 ((1 1 nil) (0 1 nil))))) (1 0 nil)) |

